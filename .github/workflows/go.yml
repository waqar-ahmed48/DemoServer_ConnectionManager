# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest
    env:
      DEMOSERVER_CONNECTIONMANAGER_POSTGRES_HOST: ${{ secrets.DEMOSERVER_CONNECTIONMANAGER_POSTGRES_HOST }}
      DEMOSERVER_CONNECTIONMANAGER_POSTGRES_PORT: ${{ secrets.DEMOSERVER_CONNECTIONMANAGER_POSTGRES_PORT }}
      DEMOSERVER_CONNECTIONMANAGER_POSTGRES_RO_USERNAME: ${{ secrets.DEMOSERVER_CONNECTIONMANAGER_POSTGRES_RO_USERNAME }}
      DEMOSERVER_CONNECTIONMANAGER_POSTGRES_RW_USERNAME: ${{ secrets.DEMOSERVER_CONNECTIONMANAGER_POSTGRES_RW_USERNAME }}
      DEMOSERVER_CONNECTIONMANAGER_POSTGRES_RO_PASSWORD: ${{ secrets.DEMOSERVER_CONNECTIONMANAGER_POSTGRES_RO_PASSWORD }}
      DEMOSERVER_CONNECTIONMANAGER_POSTGRES_RW_PASSWORD: ${{ secrets.DEMOSERVER_CONNECTIONMANAGER_POSTGRES_RW_PASSWORD }}
      DEMOSERVER_CONNECTIONMANAGER_POSTGRES_RO_CONNECTIONPOOLSIZE: ${{ secrets.DEMOSERVER_CONNECTIONMANAGER_POSTGRES_RO_CONNECTIONPOOLSIZE }}
      DEMOSERVER_CONNECTIONMANAGER_POSTGRES_RW_CONNECTIONPOOLSIZE: ${{ secrets.DEMOSERVER_CONNECTIONMANAGER_POSTGRES_RW_CONNECTIONPOOLSIZE }}
      DEMOSERVER_CONNECTIONMANAGER_POSTGRES_SSLMODE: ${{ secrets.DEMOSERVER_CONNECTIONMANAGER_POSTGRES_SSLMODE }}
      DEMOSERVER_CONNECTIONMANAGER_VAULT_HOST: ${{ secrets.DEMOSERVER_CONNECTIONMANAGER_VAULT_HOST }}
      DEMOSERVER_CONNECTIONMANAGER_VAULT_PORT: ${{ secrets.DEMOSERVER_CONNECTIONMANAGER_VAULT_PORT }}
      DEMOSERVER_CONNECTIONMANAGER_VAULT_ROLE_ID: ${{ secrets.DEMOSERVER_CONNECTIONMANAGER_VAULT_ROLE_ID }}
      DEMOSERVER_CONNECTIONMANAGER_VAULT_SECRET_ID: ${{ secrets.DEMOSERVER_CONNECTIONMANAGER_VAULT_SECRET_ID }}
      DEMOSERVER_CONNECTIONMANAGER_VAULT_TLSSKIPVERIFY: ${{ secrets.DEMOSERVER_CONNECTIONMANAGER_VAULT_TLSSKIPVERIFY }}
      DEMOSERVER_CONNECTIONMANAGER_VAULT_HTTPS: ${{ secrets.DEMOSERVER_CONNECTIONMANAGER_VAULT_HTTPS }}
      
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21.x'

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        # Require: The version of golangci-lint to use.
        # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
        # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
        version: latest

        # Optional: working directory, useful for monorepos
        # working-directory: somedir

        # Optional: golangci-lint command line arguments.
        #
        # Note: By default, the `.golangci.yml` file should be at the root of the repository.
        # The location of the configuration file can be changed by using `--config=`
        args: --timeout=30m --config=./lint/.golangci.yml

        # Optional: show only new issues if it's a pull request. The default value is `false`.
        # only-new-issues: true

        # Optional: if set to true, then all caching functionality will be completely disabled,
        #           takes precedence over all other caching options.
        # skip-cache: true

        # Optional: if set to true, then the action won't cache or restore ~/go/pkg.
        # skip-pkg-cache: true

        # Optional: if set to true, then the action won't cache or restore ~/.cache/go-build.
        # skip-build-cache: true

        # Optional: The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
        # install-mode: "goinstall"

    - name: Build
      run: go build -v ./...

    - name: Start minikube
      uses: medyagh/setup-minikube@master

    - name: Try the cluster
      run: kubectl get pods -A

    - name: testdocker
      run: |
        export SHELL=/bin/bash
        eval $(minikube docker-env -u)
        ./testdocker.sh

    - name: testk8s
      run: |
        export SHELL=/bin/bash
        eval $(minikube -p minikube docker-env)
        ./testk8s.sh

    - name: Publish to DockerHub
      uses: elgohr/Publish-Docker-Github-Action@v4
      with:
          name: waqarahmed48/ru.le_connectionmanager
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
